{"version":3,"sources":["assets/img/bookmarks-outline.png","assets/img/star-outline.png","components/search/select/select.jsx","contexts/inputField.js","components/search/inputs-wrapper/input/input.jsx","components/search/inputs-wrapper/inputsWrapper.jsx","components/search/search.jsx","contexts/repositoryContext.js","GraphQl/GraphQl-Queries.js","GraphQl/GraphQl-Mutations.js","assets/helperFunctions.js","components/repository/white-wrapper/info-boxes/info-box/infoBox.jsx","components/repository/white-wrapper/info-boxes/infoBoxes.jsx","components/repository/white-wrapper/whiteWrapper.jsx","components/load-spinner/loadSpinner.jsx","components/repository/repository.jsx","components/profile/user/user.jsx","components/profile/repos-wrapper/repo/repo.jsx","components/profile/repos-wrapper/reposWrapper.jsx","components/profile/profile.jsx","components/notFound/notFound.jsx","App.js","serviceWorker.js","index.js","assets/img/Octocat.png","assets/img/search.png"],"names":["module","exports","useStyles","makeStyles","theme","dropdownStyle","borderRadius","backgroundColor","margin","formControl","minWidth","InputLabel","color","MenuItem","Select","toggleFeild","classes","useState","field","setField","className","style","marginRight","FormControl","variant","id","labelId","value","onChange","target","MenuProps","paper","disableUnderline","InputFieldContext","createContext","props","userName","setUsername","repoName","setRepoName","ownerName","setOwnerName","Provider","updateUserName","updateRepoName","updateOwnerName","children","Input","handleSubmitWithClick","fieldContext","useContext","marginBottom","toUpperCase","slice","type","placeholder","generatePlaceholder","onClick","src","searchIcon","alt","InputsWrapper","fieldSelected","Search","history","setFieldSelected","handleSubmit","e","key","push","trim","onKeyPress","catGithub","repositoryContext","GET_USER_DATA","gql","GET_REPOSITORY_DATA","ADD_STAR","REMOVE_STAR","formatDate","input","arr","split","React","memo","newData","large","fieldName","data","Array","isArray","els","node","name","join","prevProps","currProps","InfoBoxes","pos","repoContext","RepositoryContext","owner","login","stargazers","totalCount","createdAt","isPrivate","watchers","licenseInfo","languages","edges","length","description","WhiteWrapper","star_unStar","viewerStared","gitHubIcon","useStylesFacebook","root","position","left","top","transform","bottom","palette","grey","animationDuration","circle","strokeLinecap","FacebookCircularProgress","CircularProgress","size","thickness","disableShrink","flexGrow","Spinner","Repository","match","params","reponame","queryOptions","variables","useQuery","loading","error","mutationOptions","operator","mutation","optimisticResponse","__typename","starrable","viewerHasStarred","repository","update","cache","prev","readQuery","query","Produce","newest","writeQuery","useMutation","addStar","removeStar","graphQLErrors","to","starrableId","textContent","background","avatarUrl","backgroundSize","bio","followers","navigateToRepository","bookIcon","starIcon","ReposWrapper","repos","fetchMoreData","canFetchMore","waitRefetch","map","repo","disabled","Profile","username","setWaitRefetch","fetchMore","useCallback","user","repositories","pageInfo","hasNextPage","cursor","endCursor","updateQuery","fetchMoreResult","newestOne","then","res","Notfound","pathnameArr","location","pathname","replace","App","Fragment","path","component","exact","from","Boolean","window","hostname","errorLink","onError","networkError","statusCode","alert","httpLink","createHttpLink","uri","headers","Authorization","process","link","ApolloLink","concat","client","ApolloClient","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7d4ead76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bookmarks-outline.00c4029b.png\";","module.exports = __webpack_public_path__ + \"static/media/star-outline.aa9dfbdc.png\";","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport SelectUI from \"@material-ui/core/Select\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  dropdownStyle: {\r\n    borderRadius: \"5%\",\r\n    backgroundColor: \"#2b3137\",\r\n    margin: 0,\r\n  },\r\n  formControl: {\r\n    minWidth: 150,\r\n    backgroundColor: \"white\",\r\n  },\r\n  InputLabel: {\r\n    color: \"black\",\r\n  },\r\n  MenuItem: {\r\n    backgroundColor: \"#2b3137\",\r\n    color: \"white\",\r\n    \"&:hover \": {\r\n      backgroundColor: \"white\",\r\n      color: \"#2b3137\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Select = ({ toggleFeild }) => {\r\n  const classes = useStyles();\r\n  const [field, setField] = useState(\"User\");\r\n\r\n  const handleChange = ({ target }) => {\r\n    setField(target.value);\r\n    toggleFeild(target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"select\" style={{ marginRight: \"1rem\" }}>\r\n      <FormControl variant=\"filled\" className={classes.formControl}>\r\n        <InputLabel\r\n          id=\"demo-simple-select-filled-label\"\r\n          className={classes.InputLabel}\r\n        >\r\n          Filed\r\n        </InputLabel>\r\n        <SelectUI\r\n          labelId=\"demo-simple-select-filled-label\"\r\n          id=\"demo-simple-select-filled\"\r\n          value={field}\r\n          onChange={handleChange}\r\n          MenuProps={{\r\n            classes: { paper: classes.dropdownStyle },\r\n          }}\r\n          disableUnderline={true}\r\n          color=\"primary\"\r\n        >\r\n          <MenuItem className={classes.MenuItem} value=\"Repository\">\r\n            Repository\r\n          </MenuItem>\r\n          <MenuItem className={classes.MenuItem} value=\"User\">\r\n            User\r\n          </MenuItem>\r\n        </SelectUI>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React, { createContext, useState } from \"react\";\r\n\r\nexport const InputFieldContext = createContext();\r\n\r\nexport default props => {\r\n  const [userName, setUsername] = useState(\"\");\r\n  const [repoName, setRepoName] = useState(\"\");\r\n  const [ownerName, setOwnerName] = useState(\"\");\r\n\r\n  const updateUserName = ({ target }) => {\r\n    setUsername(target.value);\r\n  };\r\n  const updateRepoName = ({ target }) => {\r\n    setRepoName(target.value);\r\n  };\r\n  const updateOwnerName = ({ target }) => {\r\n    setOwnerName(target.value);\r\n  };\r\n\r\n  return (\r\n    <InputFieldContext.Provider\r\n      value={{\r\n        userName,\r\n        repoName,\r\n        ownerName,\r\n        updateUserName,\r\n        updateRepoName,\r\n        updateOwnerName,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </InputFieldContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\n\r\nimport \"./input.scss\";\r\nimport searchIcon from \"../../../../assets/img/search.png\";\r\n\r\nimport { InputFieldContext } from \"../../../../contexts/inputField\";\r\n\r\nconst Input = ({ field, handleSubmitWithClick }) => {\r\n  //in here rather than writing the input logic like this, i'd to use the state on the context\r\n  const fieldContext = useContext(InputFieldContext);\r\n\r\n  const generatePlaceholder = field => {\r\n    if (field === \"repoName\") {\r\n      return \"Type repository name...\";\r\n    } else if (field === \"ownerName\") {\r\n      return \"Type repository's owner...\";\r\n    } else {\r\n      return \"Type username...\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"input\"\r\n      style={field === \"repo-name\" ? { marginBottom: \"1rem\" } : null}\r\n    >\r\n      <input\r\n        value={fieldContext[field]}\r\n        onChange={\r\n          fieldContext[`update${field[0].toUpperCase() + field.slice(1)}`]\r\n        }\r\n        type=\"text\"\r\n        placeholder={generatePlaceholder(field)}\r\n      />\r\n      {field === \"userName\" && (\r\n        <img\r\n          onClick={handleSubmitWithClick}\r\n          src={searchIcon}\r\n          alt=\"search icon\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nimport Input from \"./input/input\";\r\n\r\nconst InputsWrapper = ({ fieldSelected, handleSubmitWithClick }) => {\r\n  if (fieldSelected === \"User\") {\r\n    return (\r\n      <Input field=\"userName\" handleSubmitWithClick={handleSubmitWithClick} />\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"search__inputs-containner\">\r\n        <Input field=\"repoName\" />\r\n        <Input field=\"ownerName\" />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default InputsWrapper;\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport Select from \"./select/select\";\r\nimport InputsWrapper from \"./inputs-wrapper/inputsWrapper\";\r\nimport { InputFieldContext } from \"../../contexts/inputField\";\r\n\r\nimport catGithub from \"../../assets/img/Octocat.png\";\r\nimport \"./search.scss\";\r\n\r\nconst Search = ({ history }) => {\r\n  const [fieldSelected, setFieldSelected] = useState(\"User\");\r\n  const fieldContext = useContext(InputFieldContext);\r\n\r\n  const handleSubmit = e => {\r\n    if (e.key === \"Enter\" || e.type === \"click\") {\r\n      if (fieldSelected === \"User\") {\r\n        history.push(`/profile/@${fieldContext.userName.trim()}`);\r\n        //init the username field in the context\r\n        fieldContext.updateUserName({ target: { value: \"\" } });\r\n      } else {\r\n        history.push(\r\n          `/repository/${fieldContext.repoName.trim()}/@${fieldContext.ownerName.trim()}`\r\n        );\r\n        //init the owner name and repo name field in the context\r\n        fieldContext.updateOwnerName({ target: { value: \"\" } });\r\n        fieldContext.updateRepoName({ target: { value: \"\" } });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search\" onKeyPress={handleSubmit}>\r\n      <div className=\"search__title\">\r\n        <h1>GitHub Search</h1>\r\n        <img src={catGithub} alt=\"github cat\" />\r\n      </div>\r\n\r\n      <div className=\"search__form-containner\">\r\n        <Select toggleFeild={setFieldSelected} />\r\n\r\n        <InputsWrapper\r\n          fieldSelected={fieldSelected}\r\n          handleSubmitWithClick={handleSubmit}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import { createContext } from \"react\";\r\n\r\nconst repositoryContext = createContext();\r\n\r\nexport default repositoryContext;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_USER_DATA = gql`\r\n  query getUserData($login: String!, $cursor: String) {\r\n    user(login: $login) {\r\n      login\r\n      avatarUrl\r\n      bio\r\n      followers {\r\n        totalCount\r\n      }\r\n      repositories(first: 4, after: $cursor) {\r\n        edges {\r\n          node {\r\n            isPrivate\r\n            owner {\r\n              login\r\n            }\r\n            watchers {\r\n              totalCount\r\n            }\r\n            description\r\n            languages(first: 5) {\r\n              edges {\r\n                node {\r\n                  name\r\n                }\r\n              }\r\n            }\r\n            id\r\n            name\r\n            stargazers {\r\n              totalCount\r\n            }\r\n            licenseInfo {\r\n              name\r\n            }\r\n            createdAt\r\n          }\r\n        }\r\n        pageInfo {\r\n          hasNextPage\r\n          endCursor\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_REPOSITORY_DATA = gql`\r\n  query getRepositoryData($repoName: String!, $ownerName: String!) {\r\n    repository(name: $repoName, owner: $ownerName) {\r\n      id\r\n      name\r\n      owner {\r\n        login\r\n      }\r\n      viewerHasStarred\r\n      stargazers {\r\n        totalCount\r\n      }\r\n      createdAt\r\n      isPrivate\r\n      watchers {\r\n        totalCount\r\n      }\r\n      licenseInfo {\r\n        name\r\n      }\r\n      languages(first: 5) {\r\n        edges {\r\n          node {\r\n            name\r\n          }\r\n        }\r\n      }\r\n      description\r\n    }\r\n  }\r\n`;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const ADD_STAR = gql`\r\n  mutation($input: AddStarInput!) {\r\n    addStar(input: $input) {\r\n      starrable {\r\n        id\r\n        viewerHasStarred\r\n        stargazers {\r\n          totalCount\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_STAR = gql`\r\n  mutation($input: RemoveStarInput!) {\r\n    removeStar(input: $input) {\r\n      starrable {\r\n        id\r\n        viewerHasStarred\r\n        stargazers {\r\n          totalCount\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export const formatDate = input => {\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const inputWithNoRegionTime = input.split(\"T\")[0];\r\n  const arr = inputWithNoRegionTime.split(\"-\");\r\n  return `${months[arr[1] - 1]} ${arr[2]}, ${arr[0]}`;\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./infoBox.scss\";\r\n\r\nconst InfoBox = ({ large, fieldName, data }) => {\r\n  //if this is the languages field, then transform data from array to string that can be added to the page\r\n  let newData;\r\n  if (fieldName === \"Languages\" && Array.isArray(data)) {\r\n    let arr = [];\r\n    for (let els of data) {\r\n      arr.push(els.node.name);\r\n    }\r\n    newData = arr.join(\", \");\r\n  } else {\r\n    newData = data;\r\n  }\r\n\r\n  return (\r\n    <div className=\"info-box\">\r\n      <div\r\n        className={\r\n          large ? \"info-box__black-part--large\" : \"info-box__black-part\"\r\n        }\r\n      >\r\n        {fieldName}\r\n      </div>\r\n      <div className=\"info-box__white-part\">{newData}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst compare = (prevProps, currProps) => {\r\n  if (prevProps.fieldName === \"Stars\" && prevProps.data !== currProps.data)\r\n    return false;\r\n  return true;\r\n};\r\n\r\nexport default React.memo(InfoBox, compare);\r\n","import React, { useContext } from \"react\";\r\nimport RepositoryContext from \"../../../../contexts/repositoryContext\";\r\nimport { formatDate } from \"./../../../../assets/helperFunctions\";\r\n\r\nimport InfoBox from \"./info-box/infoBox\";\r\n\r\nimport \"./infoBoxes.scss\";\r\n\r\nconst InfoBoxes = ({ large, pos }) => {\r\n  const repoContext = useContext(RepositoryContext);\r\n\r\n  if (pos === \"left\")\r\n    return (\r\n      <div className=\"info-boxes\">\r\n        <InfoBox\r\n          large={large}\r\n          fieldName=\"Owner\"\r\n          data={repoContext.owner.login}\r\n        />\r\n        <InfoBox\r\n          large={large}\r\n          fieldName=\"Stars\"\r\n          data={repoContext.stargazers.totalCount}\r\n        />\r\n        <InfoBox\r\n          large={large}\r\n          fieldName=\"Created at\"\r\n          data={formatDate(repoContext.createdAt)}\r\n        />\r\n        <InfoBox\r\n          large={large}\r\n          fieldName=\"Public/Private\"\r\n          data={repoContext.isPrivate ? \"Private\" : \"Public\"}\r\n        />\r\n        <InfoBox\r\n          large={large}\r\n          fieldName=\"Watchers\"\r\n          data={repoContext.watchers.totalCount}\r\n        />\r\n        <InfoBox\r\n          large={large}\r\n          fieldName=\"Lincense Info\"\r\n          data={\r\n            repoContext.licenseInfo\r\n              ? repoContext.licenseInfo.name\r\n              : \"No License\"\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  else\r\n    return (\r\n      <div className=\"info-boxes\">\r\n        <InfoBox\r\n          large={large}\r\n          fieldName=\"Languages\"\r\n          data={\r\n            repoContext.languages.edges.length > 0\r\n              ? repoContext.languages.edges\r\n              : \"No code\"\r\n          }\r\n        />\r\n        <InfoBox\r\n          large={large}\r\n          fieldName=\"Description\"\r\n          data={\r\n            repoContext.description ? repoContext.description : \"No Description\"\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default InfoBoxes;\r\n","import React from \"react\";\r\n\r\nimport InfoBoxes from \"./info-boxes/infoBoxes\";\r\n\r\nimport \"./whiteWrapper.scss\";\r\nimport gitHubIcon from \"../../../assets/img/Octocat.png\";\r\n\r\nconst WhiteWrapper = ({ star_unStar, viewerStared }) => {\r\n  return (\r\n    <div className=\"white-wrapper\">\r\n      <img src={gitHubIcon} alt=\"github icon\" />\r\n      <div className=\"white-wrapper__repo-data\">\r\n        <InfoBoxes large={false} pos=\"left\" />\r\n\r\n        <InfoBoxes large={true} pos=\"right\" />\r\n      </div>\r\n\r\n      <div className=\"hr\"></div>\r\n\r\n      <button type=\"button\" onClick={star_unStar}>\r\n        {viewerStared ? \"Unstar\" : \"Star\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WhiteWrapper;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst useStylesFacebook = makeStyles(theme => ({\r\n  root: {\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    top: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n  },\r\n  bottom: {\r\n    color: theme.palette.grey[theme.palette.type === \"light\" ? 200 : 700],\r\n  },\r\n  top: {\r\n    color: \"#2b3137\",\r\n    animationDuration: \"600ms\",\r\n    position: \"absolute\",\r\n    left: 0,\r\n  },\r\n  circle: {\r\n    strokeLinecap: \"round\",\r\n  },\r\n}));\r\n\r\nfunction FacebookCircularProgress(props) {\r\n  const classes = useStylesFacebook();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CircularProgress\r\n        variant=\"determinate\"\r\n        className={classes.bottom}\r\n        size={40}\r\n        thickness={4}\r\n        {...props}\r\n        value={100}\r\n      />\r\n      <CircularProgress\r\n        variant=\"indeterminate\"\r\n        disableShrink\r\n        className={classes.top}\r\n        classes={{\r\n          circle: classes.circle,\r\n        }}\r\n        size={40}\r\n        thickness={4}\r\n        {...props}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n});\r\n\r\nconst Spinner = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FacebookCircularProgress />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport RepositoryContext from \"../../contexts/repositoryContext\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { GET_REPOSITORY_DATA } from \"../../GraphQl/GraphQl-Queries\";\r\nimport { ADD_STAR, REMOVE_STAR } from \"../../GraphQl/GraphQl-Mutations\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Produce from \"immer\";\r\n\r\nimport WhiteWrapper from \"./white-wrapper/whiteWrapper\";\r\nimport Spinner from \"../load-spinner/loadSpinner\";\r\n\r\nimport \"./repository.scss\";\r\n\r\nconst Repository = ({\r\n  match: {\r\n    params: { reponame, owner },\r\n  },\r\n}) => {\r\n  const queryOptions = {\r\n    variables: { repoName: reponame, ownerName: owner.slice(1) },\r\n  };\r\n  const { data, loading, error } = useQuery(GET_REPOSITORY_DATA, queryOptions);\r\n\r\n  const mutationOptions = operator => {\r\n    const mutation = operator === \"+\" ? \"addStar\" : \"removeStar\";\r\n\r\n    return {\r\n      optimisticResponse: {\r\n        __typename: \"Mutation\",\r\n        [mutation]: {\r\n          __typename: operator === \"+\" ? \"AddStarPayload\" : \"RemoveStarPayload\",\r\n          starrable: {\r\n            __typename: \"Repository\",\r\n            viewerHasStarred: operator === \"+\" ? true : false,\r\n            id: data && data.repository.id,\r\n            stargazers: {\r\n              __typename: \"StargazerConnection\",\r\n              totalCount:\r\n                operator === \"+\"\r\n                  ? data && data.repository.stargazers.totalCount + 1\r\n                  : data && data.repository.stargazers.totalCount - 1,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      update: (cache, { data }) => {\r\n        const prev = cache.readQuery({\r\n          query: GET_REPOSITORY_DATA,\r\n          variables: { repoName: reponame, ownerName: owner.slice(1) },\r\n        });\r\n\r\n        const newData = Produce(prev, newest => {\r\n          newest.repository.viewerHasStarred =\r\n            data[mutation].starrable.viewerHasStarred;\r\n          newest.repository.stargazers.totalCount =\r\n            data[mutation].starrable.stargazers.totalCount;\r\n        });\r\n        cache.writeQuery({\r\n          data: newData,\r\n          query: GET_REPOSITORY_DATA,\r\n        });\r\n      },\r\n    };\r\n  };\r\n  const [addStar] = useMutation(ADD_STAR, mutationOptions(\"+\"));\r\n  const [removeStar] = useMutation(REMOVE_STAR, mutationOptions(\"-\"));\r\n\r\n  const star_unStar = ({ target }) => {\r\n    const variables = {\r\n      input: {\r\n        starrableId: data.repository.id,\r\n      },\r\n    };\r\n\r\n    if (target.textContent === \"Star\") {\r\n      addStar({\r\n        variables,\r\n      });\r\n    } else {\r\n      removeStar({\r\n        variables,\r\n      });\r\n    }\r\n  };\r\n\r\n  if (loading) return <Spinner />;\r\n  if (error) {\r\n    if (\r\n      error.graphQLErrors.length > 0 &&\r\n      error.graphQLErrors[0].type === \"NOT_FOUND\"\r\n    ) {\r\n      return <Redirect to=\"/notFound/Repository\" />;\r\n    } else return <h2>Failed to fetch!</h2>;\r\n  }\r\n\r\n  const { repository } = data;\r\n  return (\r\n    <RepositoryContext.Provider value={repository}>\r\n      <div className=\"Repository\">\r\n        <h1 className=\"Repository__header\">{repository.name}</h1>\r\n        <WhiteWrapper\r\n          star_unStar={star_unStar}\r\n          viewerStared={repository.viewerHasStarred}\r\n        />\r\n      </div>\r\n    </RepositoryContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Repository;\r\n","import React from \"react\";\r\n\r\nimport \"./user.scss\";\r\n\r\nconst User = ({ data }) => {\r\n  return (\r\n    <div className=\"user\">\r\n      <div\r\n        className=\"user__picture\"\r\n        style={{\r\n          background: `url(${data.avatarUrl})`,\r\n          backgroundSize: \"cover\",\r\n        }}\r\n      ></div>\r\n\r\n      <div className=\"user__user-info\">\r\n        <p>\r\n          <strong>Name:</strong> {data.login}\r\n        </p>\r\n        <p>\r\n          <strong>Biography:</strong>{\" \"}\r\n          {data.bio && data.bio.trim() !== \"\"\r\n            ? data.bio\r\n            : \"This user hasn't written any biography!\"}\r\n        </p>\r\n        <p>\r\n          <strong>Followers:</strong> {data.followers.totalCount}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst compare = (prevProps, currProps) => {\r\n  return prevProps.followers === currProps.followers ? true : false;\r\n};\r\n\r\nexport default React.memo(User, compare);\r\n","import React from \"react\";\r\nimport { formatDate } from \"../../../../assets/helperFunctions\";\r\n\r\nimport \"./repo.scss\";\r\nimport bookIcon from \"../../../../assets/img/bookmarks-outline.png\";\r\nimport starIcon from \"../../../../assets/img/star-outline.png\";\r\n\r\nconst Repository = ({ data, navigateToRepository }) => {\r\n  return (\r\n    <div\r\n      className=\"repository\"\r\n      onClick={() => navigateToRepository(data.name, data.owner.login)}\r\n    >\r\n      <div className=\"repository__left-part\">\r\n        <img src={bookIcon} alt=\"book icon\" />\r\n      </div>\r\n\r\n      <div className=\"repository__right-part\">\r\n        <h3>{data.name}</h3>\r\n        <span>{data.owner.login}</span>\r\n        <div className=\"repository__sub-content\">\r\n          <span>\r\n            <img src={starIcon} alt=\"star icon\" /> {data.stargazers.totalCount}\r\n          </span>\r\n          <span>{data.licenseInfo ? data.licenseInfo.name : \"No license\"}</span>\r\n          <span>{formatDate(data.createdAt)}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Repository);\r\n","import React from \"react\";\r\n\r\nimport Repository from \"./repo/repo\";\r\n\r\nimport \"./reposWrapper.scss\";\r\n\r\nconst ReposWrapper = ({\r\n  repos,\r\n  navigateToRepository,\r\n  fetchMoreData,\r\n  canFetchMore,\r\n  waitRefetch,\r\n}) => {\r\n  return (\r\n    <div className=\"repo-wrapper\">\r\n      {repos.length === 0 ? <h1>There is no repositories!</h1> : null}\r\n\r\n      {repos.map(repo => (\r\n        <Repository\r\n          key={repo.node.id}\r\n          data={repo.node}\r\n          navigateToRepository={navigateToRepository}\r\n        />\r\n      ))}\r\n\r\n      {canFetchMore && (\r\n        <button onClick={fetchMoreData} disabled={waitRefetch}>\r\n          {waitRefetch ? \"Loading...\" : \"Load More\"}\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReposWrapper;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_USER_DATA } from \"../../GraphQl/GraphQl-Queries\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Produce from \"immer\";\r\n\r\nimport User from \"./user/user\";\r\nimport ReposWrapper from \"./repos-wrapper/reposWrapper\";\r\nimport Spinner from \"./../load-spinner/loadSpinner\";\r\n\r\nimport \"./profile.scss\";\r\n\r\nconst Profile = ({\r\n  match: {\r\n    params: { username },\r\n  },\r\n  history,\r\n}) => {\r\n  const [waitRefetch, setWaitRefetch] = useState(false);\r\n\r\n  const { data, loading, error, fetchMore } = useQuery(GET_USER_DATA, {\r\n    variables: { login: username.slice(1) },\r\n  });\r\n\r\n  const navigateToRepository = useCallback(\r\n    (repoName, owner) => {\r\n      history.push(`/repository/${repoName}/@${owner}`);\r\n    },\r\n    [history]\r\n  );\r\n\r\n  const fetchMoreData = () => {\r\n    setWaitRefetch(true);\r\n    fetchMore({\r\n      variables: {\r\n        login: username.slice(1),\r\n        cursor: data.user.repositories.pageInfo.endCursor,\r\n      },\r\n      updateQuery: (prev, { fetchMoreResult }) => {\r\n        return Produce(prev, newestOne => {\r\n          newestOne.user.repositories.edges = [\r\n            ...newestOne.user.repositories.edges,\r\n            ...fetchMoreResult.user.repositories.edges,\r\n          ];\r\n          newestOne.user.repositories.pageInfo =\r\n            fetchMoreResult.user.repositories.pageInfo;\r\n        });\r\n      },\r\n    }).then(res => setWaitRefetch(false));\r\n  };\r\n\r\n  if (loading) return <Spinner />;\r\n  if (error) {\r\n    if (\r\n      error.graphQLErrors.length > 0 &&\r\n      error.graphQLErrors[0].type === \"NOT_FOUND\"\r\n    ) {\r\n      return <Redirect to=\"/notFound/User\" />;\r\n    } else return <h2>Failed to fetch!</h2>;\r\n  }\r\n\r\n  const { user } = data;\r\n\r\n  return (\r\n    <div className=\"profile\">\r\n      <User\r\n        data={{\r\n          avatarUrl: user.avatarUrl,\r\n          login: user.login,\r\n          bio: user.bio,\r\n          followers: {\r\n            totalCount: user.followers.totalCount,\r\n          },\r\n        }}\r\n      />\r\n\r\n      <ReposWrapper\r\n        canFetchMore={user.repositories.pageInfo.hasNextPage}\r\n        fetchMoreData={fetchMoreData}\r\n        repos={user.repositories.edges}\r\n        navigateToRepository={navigateToRepository}\r\n        waitRefetch={waitRefetch}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\n\r\nimport \"./notFound.scss\";\r\n\r\nconst Notfound = ({ history, location: { pathname } }) => {\r\n  const pathnameArr = pathname.split(\"/\");\r\n\r\n  const goHome = () => {\r\n    history.replace(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"not-found\">\r\n      <h1>\r\n        {pathnameArr.length > 2\r\n          ? `${pathnameArr[2]} not Found`\r\n          : \"Page not Found\"}\r\n      </h1>\r\n      <button onClick={goHome}>Go Home</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notfound;\r\n","import React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\nimport Search from \"./components/search/search\";\r\nimport Repository from \"./components/repository/repository\";\r\nimport Profile from \"./components/profile/profile\";\r\nimport Notfound from \"./components/notFound/notFound\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Switch>\r\n        <Route path=\"/search\" component={Search} />\r\n        <Route\r\n          path=\"/repository/:reponame/:owner\"\r\n          exact\r\n          component={Repository}\r\n        />\r\n        <Route path=\"/profile/:username\" exact component={Profile} />\r\n        <Route path=\"/notFound\" component={Notfound} />\r\n        <Redirect from=\"/\" exact to=\"/search\" />\r\n        <Redirect to=\"/notFound\" />\r\n      </Switch>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n  ApolloProvider,\n  ApolloLink,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport InputProvider from \"./contexts/inputField\";\nimport \"./index.css\";\n\nconst errorLink = onError(({ networkError }) => {\n  if (networkError) {\n    if (networkError.statusCode === 429)\n      alert(\"There is too many requests, please try again later!\");\n    else alert(\"This is a network error, please reload the page!\");\n  }\n});\nconst httpLink = createHttpLink({\n  uri: \"https://api.github.com/graphql\",\n  headers: {\n    Authorization: `bearer ${process.env.REACT_APP_TOKEN}`,\n  },\n});\nconst link = ApolloLink.concat(errorLink, httpLink);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <InputProvider>\n        <App />\n      </InputProvider>\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Octocat.ef468e27.png\";","module.exports = __webpack_public_path__ + \"static/media/search.7c4ce288.png\";"],"sourceRoot":""}